{"version":3,"file":"static/js/170.e27cef67.chunk.js","mappings":"uKAEaA,EAAc,SAACC,GACxB,OACI,yBACEA,EAAMC,MAGf,ECJYC,EAAU,SAACF,GACtB,IAAIG,EAAaH,EAAMI,SAASC,KAAI,SAAAC,GAAI,OAAI,SAACP,EAAD,CAAaE,KAAMK,EAAKL,MAA5B,IAExC,OACE,yBACGE,GAGN,ECXD,EAAwB,uB,UCIXI,EAAS,SAACP,GACnB,IAAIQ,EAAI,oBAAgBR,EAAMC,MAC9B,OACI,0BACI,SAAC,KAAD,CAASQ,GAAID,EAAb,SAAoBR,EAAMC,QAGrC,ECNYS,EAAU,SAACV,GAEpB,IAAIW,EAAaX,EAAMY,MAAMP,KAAI,SAACC,EAAMO,GAAP,OAAiB,SAACN,EAAD,CAAQN,KAAMK,EAAKQ,MAAWD,EAA/C,IAEjC,OACI,gBAAKE,UAAWC,EAAhB,SACKL,GAGZ,ECdD,EAA2B,2BAA3B,EAAgE,0B,sCCsBnDM,EAAyB,SAACjB,GAQrC,OACE,0BACE,SAACkB,EAAD,CAAkBC,SATP,SAACC,GAEdpB,EAAMqB,cAAcD,EAASE,QAE9B,KAQF,EAEKJ,GAAmBK,EAAAA,EAAAA,GAAU,CACjCC,KAAM,WADiBD,EAhCJ,SAACvB,GAGpB,IAAQyB,EAAiBzB,EAAjByB,aAER,OACE,kBAAMN,SAAUM,EAAhB,WACE,SAACC,EAAA,EAAD,CACEC,UAAWC,EAAAA,EACXd,KAAM,UACNe,SAAU,CAACC,EAAAA,OAEb,uCAGL,I,8BC6BD,GAAeC,E,QAAAA,KACbC,EAAAA,EAAAA,KAjBqB,SAACC,GACtB,MAAO,CACLC,WAAYD,EAAME,aAAaD,WAC/BtB,MAAOqB,EAAME,aAAavB,MAC1BR,SAAU6B,EAAME,aAAa/B,SAEhC,IAEwB,SAACgC,GACxB,MAAO,CACLf,cAAe,SAACC,GACdc,GAASC,EAAAA,EAAAA,GAA2Bf,GACrC,EAEJ,IAICgB,EAAAA,EAFF,ECvCwB,SAACtC,GACvB,OACE,oBAASe,UAAWC,EAApB,UACE,iBAAKD,UAAWC,EAAhB,WACA,SAACN,EAAD,CAASE,MAAOZ,EAAMY,SACtB,SAACV,EAAD,CAASE,SAAUJ,EAAMI,YACzB,SAACa,EAAD,CAAwBI,cAAerB,EAAMqB,oBAIlD,G,4GCjBGkB,EAAmB,SAACN,GACtB,MAAO,CACLO,OAAQP,EAAMQ,KAAKD,OAEtB,EAEM,SAASF,EAAQI,GAUtB,OAAOV,EAAAA,EAAAA,IAAQO,EAARP,EATP,SAAyBhC,GACvB,OAAKA,EAAMwC,QAET,+BACE,SAACE,GAAD,UAAe1C,OAHO,SAAC,KAAD,CAAUS,GAAG,UAMxC,GAGF,C","sources":["components/Main/Messages/Message/MessageText/MessageText.jsx","components/Main/Messages/Message/Message.jsx","webpack://my-app/./src/components/Main/Messages/Dialogs/Dialogs.module.scss?bff9","components/Main/Messages/Dialogs/Dialog/Dialog.jsx","components/Main/Messages/Dialogs/Dialogs.jsx","webpack://my-app/./src/components/Main/Messages/Messages.module.scss?0dca","components/Main/Messages/MessageInput/MessageInput.jsx","components/Main/Messages/MessagesContainer.jsx","components/Main/Messages/Messages.jsx","hoc/AuthHoc.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nexport const MessageText = (props) => {\r\n    return (\r\n        <div>\r\n         {props.text}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { MessageText } from \"./MessageText/MessageText\";\r\n\r\n\r\nexport const Message = (props) => {\r\n  let arrMessage = props.messages.map(item => <MessageText text={item.text}></MessageText>)\r\n\r\n  return (\r\n    <div>\r\n      {arrMessage}\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"users\":\"Dialogs_users__gijaJ\"};","import React from \"react\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\n\r\nexport const Dialog = (props) => {\r\n    let path = `/messages/${props.text}`\r\n    return (\r\n        <div>\r\n            <NavLink to={path}>{props.text}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport classes from \"./Dialogs.module.scss\"\r\nimport { Dialog } from \"./Dialog/Dialog\"\r\n\r\n\r\n\r\nexport const Dialogs = (props) => {\r\n    \r\n    let arrElement = props.users.map((item, index) => <Dialog text={item.name} key={index}></Dialog>)\r\n     \r\n    return (\r\n        <div className={classes.users}>\r\n            {arrElement}\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Messages_messages__9tJAE\",\"section\":\"Messages_section__Vjur8\"};","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { minLength } from './../../../../Validate/Validate';\r\nimport { textareaControl } from './../../../Common/FormControl/FormControl';\r\n\r\n\r\nconst MessageInput = (props) => {\r\n\r\n\r\n  const { handleSubmit } = props;\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Field\r\n        component={textareaControl}\r\n        name={'message'}\r\n        validate={[minLength]}\r\n      />\r\n      <button>Send</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const MessagesInputContainer = (props) => {\r\n  let onSubmit = (formData) => {\r\n\r\n    props.addNewMessage(formData.message)\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <MessageFormRedux onSubmit={onSubmit} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MessageFormRedux = reduxForm({\r\n  form: \"message\",\r\n})(MessageInput);\r\n","import { Messages } from \"./Messages\";\r\nimport { addNewMessageActionCreator } from \"../../../state/messageReducer\";\r\n\r\nimport { connect } from \"react-redux/es/exports\";\r\nimport { AuthHoc } from \"./../../../hoc/AuthHoc\";\r\nimport { compose } from \"redux\";\r\n\r\n// export const MessagesContainer = (props) => {\r\n\r\n//   let users = props.store.getState().messagesPage.users;\r\n\r\n//   let messages = props.store.getState().messagesPage.messages;\r\n\r\n//   let newMessage = props.store.getState().messagesPage.newMessage;\r\n\r\n//   const changeMessageText = (text) => {\r\n//     props.store.dispatch(updateNewMessageActionCreator(text));\r\n//   };\r\n\r\n//   const addNewMessage = () => {\r\n//     props.store.dispatch(addNewMessageActionCreator());\r\n//   };\r\n\r\n//   return (\r\n//     <Messages\r\n//       users={users}\r\n//       messages={messages}\r\n//       newMessage={newMessage}\r\n//       changeMessageText={changeMessageText}\r\n//       addNewMessage={addNewMessage}\r\n//     ></Messages>\r\n//   );\r\n// };\r\n\r\nlet mapStateToPropse = (state) => {\r\n  return {\r\n    newMessage: state.messagesPage.newMessage,\r\n    users: state.messagesPage.users,\r\n    messages: state.messagesPage.messages,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addNewMessage: (message) => {\r\n      dispatch(addNewMessageActionCreator(message));\r\n    }\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToPropse, mapDispatchToProps),\r\n  AuthHoc\r\n)(Messages);\r\n\r\n// export const MessagesContainer = connect(mapStateToPropse, mapDispatchToProps)(AuthHoc(Messages))\r\n","import React from \"react\";\r\nimport { Message } from \"./Message/Message\";\r\nimport { Dialogs } from \"./Dialogs/Dialogs\";\r\nimport classes from \"./Messages.module.scss\"\r\nimport { MessagesInputContainer } from './MessageInput/MessageInput';\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const Messages = (props) => {  \r\n  return (\r\n    <section className={classes.section} >\r\n      <div className={classes.messages}>\r\n      <Dialogs users={props.users}/>\r\n      <Message messages={props.messages}/>\r\n      <MessagesInputContainer addNewMessage={props.addNewMessage}></MessagesInputContainer>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux/es/exports\";\r\n\r\nlet mapStateToPropse = (state) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport function AuthHoc(Component) {\r\n  function RedirectAuthHoc(props) {\r\n    if (!props.isAuth) return <Navigate to=\"/login\" />;\r\n    return (\r\n      <>\r\n        <Component {...props} />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return connect(mapStateToPropse)(RedirectAuthHoc)\r\n}\r\n\r\n// что бы не писать isAuth в каждой контейнерной компоненте, и не делать проверку if (!props.isAuth) return <Navigate to=\"/login\" />;\r\n// мы создали специальную компоненту \"Компоненту высокого порядка\", которая принимает в себя компоненту и возвращает другую компоненту\r\n// также мы обернули эту компоненту в коннект, что б в каждом файле не передавать isAuth: state.auth.isAuth,\r\n"],"names":["MessageText","props","text","Message","arrMessage","messages","map","item","Dialog","path","to","Dialogs","arrElement","users","index","name","className","classes","MessagesInputContainer","MessageFormRedux","onSubmit","formData","addNewMessage","message","reduxForm","form","handleSubmit","Field","component","textareaControl","validate","minLength","compose","connect","state","newMessage","messagesPage","dispatch","addNewMessageActionCreator","AuthHoc","mapStateToPropse","isAuth","auth","Component"],"sourceRoot":""}