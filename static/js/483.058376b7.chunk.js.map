{"version":3,"file":"static/js/483.058376b7.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Main/Users/User/User.module.scss?3e00","components/Main/Users/User/User.tsx","webpack://my-app/./src/components/Main/Users/Users.module.scss?d848","webpack://my-app/./src/components/Main/Users/UsersPagination/UserPagination.module.scss?5ec2","components/Main/Users/UsersPagination/UserPagination.tsx","components/Main/Users/UserSearchForm/UserSearchForm.tsx","selectors/userSelectors.ts","components/Main/Users/Users.tsx","components/Main/Users/UsersContainer.tsx","hoc/AuthHoc.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"User_avatar__hHGzy\"};","import React from \"react\";\r\nimport classes from \"./User.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { UserType } from \"../../../../types/usersReducerType\";\r\n\r\ntype PropsType = {\r\n  user: UserType;\r\n  unFollowUserThunk: (id: number) => void;\r\n  followUserThunk: (id: number) => void;\r\n  followId: number[]\r\n}\r\n\r\nexport const User: React.FunctionComponent<PropsType> = (props) => {\r\n  const onUnFollowUser = () => {\r\n    props.unFollowUserThunk(props.user.id);\r\n  };\r\n\r\n  const onFollowUser = () => {\r\n    props.followUserThunk(props.user.id);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavLink to={`/profile/${props.user.id}`}>\r\n        <img\r\n          src={\r\n            props.user.photos.small\r\n              ? props.user.photos.small\r\n              : \"https://repository-images.githubusercontent.com/15949540/b0a70b80-cb15-11e9-8338-661f601406a1\"\r\n          }\r\n          alt=\"avatar\"\r\n          className={classes.avatar}\r\n        />\r\n      </NavLink>\r\n      <div>{props.user.name}</div>\r\n      <div>status</div>\r\n      <div>{props.user.id}</div>\r\n      {!!props.user.followed ? (\r\n        <button\r\n          onClick={() => onUnFollowUser()}\r\n          disabled={props.followId.some((id) => id === props.user.id)}\r\n        >\r\n          Unfollow\r\n        </button>\r\n      ) : (\r\n        <button\r\n          onClick={() => onFollowUser()}\r\n          disabled={props.followId.some((id) => id === props.user.id)}\r\n        >\r\n          Follow\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Users_section__uytiE\"};","// extracted by mini-css-extract-plugin\nexport default {\"curientPage\":\"UserPagination_curientPage__P5wWP\"};","import React, { useState } from \"react\";\r\nimport classes from \"./UserPagination.module.scss\";\r\n\r\ntype PropsType = {\r\n  pageCount: number\r\n  currentPage: number\r\n  onChangeCurrentPage: (number: number) => void\r\n}\r\n\r\nexport const UserPagination: React.FunctionComponent<PropsType> = (props) => {\r\n  let pages: number[] = [];\r\n  let numberPagesDisplayed = 10;\r\n  for (let i = 1; i <= Math.ceil(props.pageCount); i++) {\r\n    pages.push(i);\r\n  }\r\n  let [paginationCount, setPaginationCount] = useState(0);\r\n\r\n  return (\r\n    <>\r\n      {paginationCount !== 0 ? (\r\n        <button onClick={() => setPaginationCount(paginationCount - 1)}>\r\n          PREV\r\n        </button>\r\n      ) : null}\r\n      {pages.map((item) =>\r\n        item > paginationCount * numberPagesDisplayed &&\r\n        item <= paginationCount * numberPagesDisplayed + 10 ? (\r\n          <button\r\n            className={props.currentPage === item ? classes.curientPage : ''}\r\n            onClick={() => {\r\n              props.onChangeCurrentPage(item);\r\n            }}\r\n          >\r\n            {item}\r\n          </button>\r\n        ) : null\r\n      )}\r\n      {props.pageCount / numberPagesDisplayed > paginationCount ? (\r\n        <button onClick={() => setPaginationCount(paginationCount + 1)}>\r\n          NEXT\r\n        </button>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n","import { Field, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport { FilterType } from \"../../../../types/usersReducerType\";\r\n\r\ntype PropsType = {\r\n  onSearchUsers: (term: string, friend: string) => void;\r\n  filter: FilterType;\r\n};\r\n\r\nexport const UserSearchForm: React.FunctionComponent<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={{ term: props.filter.term, friend: props.filter.friend }}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          props.onSearchUsers(values.term, String(values.friend));\r\n          setSubmitting(false);\r\n        }}>\r\n        {({ values, handleSubmit, isSubmitting }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <Field type=\"text\" name=\"term\" value={values.term} />\r\n            <Field name=\"friend\" as=\"select\" className=\"my-select\">\r\n              <option value=\"null\">All</option>\r\n              <option value=\"true\">Followed</option>\r\n              <option value=\"false\">Not followed</option>\r\n            </Field>\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Find\r\n            </button>\r\n          </form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n","import { createSelector } from \"reselect\";\r\nimport { AppStateType } from \"../state/redux-store\";\r\n\r\nexport const usersSelector = (state: AppStateType) => {\r\n  return state.usersPage.users;\r\n};\r\n\r\nexport const usersSelectorSuper = createSelector(usersSelector, (users) => {\r\n  return users;\r\n});\r\n\r\nexport const totalCountSelector = (state: AppStateType) => {\r\n  return state.usersPage.totalCount;\r\n};\r\nexport const usersCountSelector = (state: AppStateType) => {\r\n  return state.usersPage.usersCount;\r\n};\r\nexport const currentPageSelector = (state: AppStateType) => {\r\n  // debugger\r\n  return state.usersPage.currentPage;\r\n};\r\nexport const preloadSelector = (state: AppStateType) => {\r\n  return state.usersPage.preload;\r\n};\r\nexport const followIdSelector = (state: AppStateType) => {\r\n  return state.usersPage.followId;\r\n};\r\nexport const filterSelector = (state: AppStateType) => {\r\n  return state.usersPage.filter;\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { User } from \"./User/User\";\r\nimport classes from \"./Users.module.scss\";\r\nimport { UserPagination } from \"./UsersPagination/UserPagination\";\r\nimport { Preloader } from \"../../Common/Preloader/Preloader\";\r\nimport { UserSearchForm } from \"./UserSearchForm/UserSearchForm\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  currentPageSelector,\r\n  filterSelector,\r\n  followIdSelector,\r\n  totalCountSelector,\r\n  usersCountSelector,\r\n  usersSelector,\r\n} from \"../../../selectors/userSelectors\";\r\nimport {\r\n  followUserThunk,\r\n  searchUsersThunk,\r\n  userGetChangeCurrentPageThunk,\r\n} from \"../../../state/usersReducer\";\r\nimport { AnyAction } from \"redux\";\r\nimport { ThunkDispatch } from \"redux-thunk\";\r\nimport { AppStateType } from \"../../../state/redux-store\";\r\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\r\n\r\ntype AppDispatch = ThunkDispatch<AppStateType, any, AnyAction>;\r\n\r\nexport const Users: React.FunctionComponent<{}> = () => {\r\n  const preload = useSelector((state: AppStateType) => state.usersPage.preload);\r\n  const users = useSelector(usersSelector);\r\n  const totalCount = useSelector(totalCountSelector);\r\n  const usersCount = useSelector(usersCountSelector);\r\n  const currentPage = useSelector(currentPageSelector);\r\n  const followId = useSelector(followIdSelector);\r\n  const filter = useSelector(filterSelector);\r\n\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  useEffect(() => {\r\n    if (!!filter.term) {\r\n      // navigate(`/users?term=${filter.term}&friend=${filter.friend}&page=${currentPage}`);\r\n      setSearchParams({ term: filter.term, friend: filter.friend, page: String(currentPage) });\r\n    } else {\r\n      setSearchParams({ friend: filter.friend, page: String(currentPage) });\r\n      // navigate(`/users?friend=${filter.friend}&page=${currentPage}`);\r\n    }\r\n  }, [filter.friend, filter.term, currentPage]);\r\n\r\n  useEffect(() => {\r\n      let number = searchParams.get(\"page\") || 1;\r\n      let term = searchParams.get(\"term\") || '';\r\n      let friend = searchParams.get(\"friend\")!;\r\n    if (!filter.friend && !filter.term) {\r\n      dispatch(searchUsersThunk(+number, usersCount, term, friend));\r\n    }\r\n  }, []);\r\n\r\n  const dispatch: AppDispatch = useDispatch();\r\n\r\n  const followUser = (id: number) => dispatch(followUserThunk(id));\r\n  const unFollowUser = (id: number) => dispatch(followUserThunk(id));\r\n\r\n  const onChangeCurrentPage = (number: number) => {\r\n    dispatch(userGetChangeCurrentPageThunk(number, usersCount));\r\n  };\r\n\r\n  const onSearchUsers = (term: string, friend: string) => {\r\n    dispatch(searchUsersThunk(currentPage, usersCount, term, friend));\r\n  };\r\n\r\n  return (\r\n    <section className={classes.section}>\r\n      {preload ? (\r\n        <Preloader />\r\n      ) : (\r\n        <UserPagination\r\n          pageCount={totalCount / usersCount}\r\n          currentPage={currentPage}\r\n          onChangeCurrentPage={onChangeCurrentPage}\r\n        />\r\n      )}\r\n      <UserSearchForm onSearchUsers={onSearchUsers} filter={filter} />\r\n      {users.map((item) => (\r\n        <User\r\n          user={item}\r\n          followId={followId}\r\n          followUserThunk={followUser}\r\n          unFollowUserThunk={unFollowUser}></User>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux/es/exports\";\r\nimport { Users } from \"./Users\";\r\nimport {\r\n  userGetThunk,\r\n  userGetChangeCurrentPageThunk,\r\n  followUserThunk,\r\n  unFollowUserThunk,\r\n  searchUsersThunk,\r\n} from \"./../../../state/usersReducer\";\r\nimport { AuthHoc } from \"../../../hoc/AuthHoc\";\r\nimport { compose } from \"redux\";\r\nimport {\r\n  totalCountSelector,\r\n  usersCountSelector,\r\n  currentPageSelector,\r\n  preloadSelector,\r\n  followIdSelector,\r\n  usersSelectorSuper,\r\n  filterSelector,\r\n} from \"../../../selectors/userSelectors\";\r\nimport { AppStateType } from \"../../../state/redux-store\";\r\nimport { FilterType, UserType } from \"../../../types/usersReducerType\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\n\r\n// type PropsType = MapStatePropsType & MapDispacthPropsType & OwnPropsType;\r\n\r\n// type MapStatePropsType = {\r\n//   users: UserType[];\r\n//   totalCount: number;\r\n//   usersCount: number;\r\n//   currentPage: number;\r\n//   preload: boolean;\r\n//   followId: number[];\r\n//   filter: FilterType;\r\n// };\r\n\r\n// type MapDispacthPropsType = {\r\n//   userGetThunk: (currentPage: number, pageSize: number, term: string, friend: string) => void;\r\n//   userGetChangeCurrentPageThunk: (number: number, usersCount: number) => void;\r\n//   followUserThunk: (id: number) => void;\r\n//   unFollowUserThunk: (id: number) => void;\r\n//   searchUsersThunk: (currentPage: number, pageSize: number, term: string, friend: string) => void\r\n// };\r\n\r\n// type OwnPropsType = {};\r\n\r\nconst UsersContainer: React.FunctionComponent<{}> = () => {\r\n  // если в конструкторе мы ничего не используем, то можно не писать его\r\n  // componentDidMount() {\r\n  //   this.props.userGetThunk(this.props.currentPage, this.props.usersCount, this.props.filter.term, this.props.filter.friend); // userGetThunk - это userGetThunk = (currentPage, usersCount) => dispatch(userGetThunk(currentPage, usersCount))\r\n  //   // т.к. мы можем диспатчить только action(объект с обязательным свойством type), мы установили спец. библиотеку которая позволяет нам диспатчить функции\r\n\r\n  //   // this.props.setPreload(true);\r\n  //   // getUsers(this.props.currentPage, this.props.usersCount).then((value) => {\r\n  //   //   this.props.setUsers(value.data.items);\r\n  //   //   this.props.setTotalCount(value.data.totalCount);\r\n  //   //   this.props.setPreload(false);\r\n  //   // });\r\n  // } // метод вызывается после рендеринга компонента\r\n\r\n  // onChangeCurrentPage = (number: number) => {\r\n  //   this.props.userGetChangeCurrentPageThunk(number, this.props.usersCount);\r\n  //   // this.props.setPreload(true);\r\n  //   // getUsers(number, this.props.usersCount).then((value) => {\r\n  //   //     this.props.setPreload(false);\r\n  //   //     this.props.setUsers(value.data.items);\r\n  //   //     this.props.setTotalCount(value.data.totalCount);\r\n  //   //   });\r\n  //   // this.props.changeCurrentPage(number);\r\n  // };\r\n\r\n  // onSearchUsers = (term: string, friend: string) => {\r\n  //   this.props.searchUsersThunk(1, this.props.usersCount, term, friend);\r\n  // };\r\n  // смысл использования в данном месте классовой компоненты вот в чем\r\n  // Реакт создаёт обьект 1 раз, и в след раз при изменении стейта обращается к созданному обьекту\r\n  // а не создаёт его каждый раз\r\n    return (\r\n      <>\r\n        <Users\r\n\r\n          // // currentPage={this.props.currentPage}\r\n          // // onChangeCurrentPage={this.onChangeCurrentPage}\r\n          // users={this.props.users}\r\n          // followId={this.props.followId}\r\n          // followUserThunk={this.props.followUserThunk}\r\n          // unFollowUserThunk={this.props.unFollowUserThunk}\r\n          // preload={this.props.preload}\r\n          // usersCount={this.props.usersCount}\r\n          // totalCount={this.props.totalCount}\r\n          // // onSearchUsers={this.onSearchUsers}\r\n          // filter={this.props.filter}\r\n        />\r\n      </>\r\n    );\r\n}\r\n\r\n// const mapStateToPropse = (state: AppStateType) => {\r\n//   return {\r\n//     users: usersSelectorSuper(state),\r\n//     totalCount: totalCountSelector(state),\r\n//     usersCount: usersCountSelector(state),\r\n//     currentPage: currentPageSelector(state),\r\n//     preload: preloadSelector(state),\r\n//     followId: followIdSelector(state),\r\n//     filter: filterSelector(state),\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     followUser: (id) => {\r\n//       dispatch(followUser(id));\r\n//     },\r\n//     unFollowUser: (id) => {\r\n//       dispatch(unFollowUser(id));\r\n//     },\r\n//     setUsers: (users) => {\r\n//       dispatch(setUsers(users));\r\n//     },\r\n//     setTotalCount: (totalCount) => {\r\n//       dispatch(setTotalCount(totalCount));\r\n//     },\r\n//     changeCurrentPage: (currentPage) => {\r\n//       dispatch(changeCurrentPage(currentPage));\r\n//     },\r\n//     setPreload: (preload) => {\r\n//       dispatch(setPreload(preload));\r\n//     },\r\n//   };\r\n// };\r\n\r\n// Мы вместо функции mapDispatchToProps в connect можем сразу передать наши actionCreator, connect сам сделает коллбек функции на их основе\r\n\r\n// export default connect(mapStateToPropse, mapDispatchToProps)(UsersContainer);\r\n\r\n// export default connect(mapStateToPropse, {\r\n//   userGetThunk,\r\n//   userGetChangeCurrentPageThunk,\r\n//   followUserThunk,\r\n//   unFollowUserThunk\r\n// })(AuthHoc(UsersContainer));\r\n\r\nexport default compose(\r\n  // connect<MapStatePropsType, MapDispacthPropsType, OwnPropsType, AppStateType>(mapStateToPropse, {\r\n  //   userGetThunk,\r\n  //   userGetChangeCurrentPageThunk,\r\n  //   followUserThunk,\r\n  //   unFollowUserThunk,\r\n  //   searchUsersThunk\r\n  // }),\r\n  AuthHoc\r\n)(UsersContainer) as React.FunctionComponent;\r\n","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux/es/exports\";\r\nimport { AppStateType } from \"../state/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean;\r\n};\r\n\r\ntype MapDispacthPropsType = {};\r\n\r\ntype OwnPropsType = {};\r\n\r\nlet mapStateToPropse = (state: AppStateType) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport function AuthHoc<T extends object>(Component: React.ComponentType<T>) {\r\n  const RedirectAuthHoc: React.FunctionComponent<MapStatePropsType & MapDispacthPropsType> = (\r\n    props\r\n  ) => {\r\n    let { isAuth, ...restProps } = props;\r\n    if (!isAuth) return <Navigate to=\"/login\" />;\r\n    return (\r\n      <>\r\n        <Component {...restProps as T} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return connect<MapStatePropsType, MapDispacthPropsType, OwnPropsType, AppStateType>(\r\n    mapStateToPropse,\r\n    {}\r\n  )(RedirectAuthHoc);\r\n}\r\n\r\n// что бы не писать isAuth в каждой контейнерной компоненте, и не делать проверку if (!props.isAuth) return <Navigate to=\"/login\" />;\r\n// мы создали специальную компоненту \"Компоненту высшего порядка\", которая принимает в себя компоненту и возвращает другую компоненту\r\n// также мы обернули эту компоненту в коннект, что б в каждом файле не передавать isAuth: state.auth.isAuth,\r\n"],"names":["User","props","to","user","id","src","photos","small","alt","className","classes","name","followed","onClick","unFollowUserThunk","disabled","followId","some","followUserThunk","UserPagination","pages","i","Math","ceil","pageCount","push","useState","paginationCount","setPaginationCount","map","item","currentPage","onChangeCurrentPage","UserSearchForm","enableReinitialize","initialValues","term","filter","friend","onSubmit","values","setSubmitting","onSearchUsers","String","handleSubmit","isSubmitting","type","value","as","usersSelector","state","usersPage","users","totalCountSelector","createSelector","totalCount","usersCountSelector","usersCount","currentPageSelector","followIdSelector","filterSelector","Users","preload","useSelector","useNavigate","useSearchParams","searchParams","setSearchParams","useEffect","page","number","get","dispatch","searchUsersThunk","useDispatch","followUser","unFollowUser","Preloader","userGetChangeCurrentPageThunk","compose","AuthHoc","mapStateToPropse","isAuth","auth","Component","connect","restProps"],"sourceRoot":""}