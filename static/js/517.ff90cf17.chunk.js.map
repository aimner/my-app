{"version":3,"file":"static/js/517.ff90cf17.chunk.js","mappings":"uKAOaA,EAAkD,SAACC,GAC5D,OACI,yBACEA,EAAMC,MAGf,ECJYC,EAA8C,SAACF,GAC1D,IAAIG,EAAaH,EAAMI,SAASC,KAAI,SAAAC,GAAI,OAAI,SAACP,EAAD,CAAaE,KAAMK,EAAKL,MAA5B,IAExC,OACE,yBACGE,GAGN,EChBD,EAAwB,uB,SCQXI,EAA6C,SAACP,GACvD,IAAIQ,EAAI,oBAAgBR,EAAMC,MAC9B,OACI,0BACI,SAAC,KAAD,CAASQ,GAAID,EAAb,SAAoBR,EAAMC,QAGrC,ECNYS,EAA8C,SAACV,GAExD,IAAIW,EAAaX,EAAMY,MAAMP,KAAI,SAACC,EAAMO,GAAP,OAAiB,SAACN,EAAD,CAAQN,KAAMK,EAAKQ,MAAWD,EAA/C,IAEjC,OACI,gBAAKE,UAAWC,EAAhB,SACKL,GAGZ,EClBD,EAA2B,2BAA3B,EAAgE,0B,uCCuBnDM,EAA2E,SAACjB,GAIvF,OACE,0BACE,SAACkB,EAAD,CAAkBC,SALP,SAACC,GACdpB,EAAMqB,cAAcD,EAASE,QAC9B,KAMF,EAEKJ,GAAmBK,EAAAA,EAAAA,GAAoB,CAC3CC,KAAM,WADiBD,EAtBkD,SAACvB,GAC1E,IAAQyB,EAAiBzB,EAAjByB,aAER,OACE,kBAAMN,SAAUM,EAAhB,WACE,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAiBd,KAAM,UAAWe,SAAU,CAACC,EAAAA,OAC/D,uCAGL,I,wCCbGC,EAA6BC,EAAAA,GAAAA,2BAuBjC,GAAeC,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,KARqB,SAACC,GACtB,MAAO,CACLvB,MAAOuB,EAAMC,aAAaxB,MAC1BR,SAAU+B,EAAMC,aAAahC,SAEhC,GAG2B,CAAC2B,2BAAAA,IAC3BM,EAAAA,EAFF,ECnB4D,SAACrC,GAC3D,OACE,oBAASe,UAAWC,EAApB,UACE,iBAAKD,UAAWC,EAAhB,WACA,SAACN,EAAD,CAASE,MAAOZ,EAAMY,SACtB,SAACV,EAAD,CAASE,SAAUJ,EAAMI,YACzB,SAACa,EAAD,CAAwBI,cAAerB,EAAM+B,iCAIlD,G,mICVGO,EAAmB,SAACH,GACtB,MAAO,CACLI,OAAQJ,EAAMK,KAAKD,OAEtB,EAEM,SAASF,EAA0BI,GAaxC,OAAOP,EAAAA,EAAAA,IACLI,EACA,CAAC,EAFIJ,EAZoF,SACzFlC,GAEA,IAAMuC,EAAyBvC,EAAzBuC,OAAWG,GAAjB,OAA+B1C,EAA/B,GACA,OAAKuC,GAEH,+BACE,SAACE,GAAD,UAAeC,OAHC,SAAC,KAAD,CAAUjC,GAAG,UAMlC,GAMF,C","sources":["components/Main/Messages/Message/MessageText/MessageText.tsx","components/Main/Messages/Message/Message.tsx","webpack://my-app/./src/components/Main/Messages/Dialogs/Dialogs.module.scss?bff9","components/Main/Messages/Dialogs/Dialog/Dialog.tsx","components/Main/Messages/Dialogs/Dialogs.tsx","webpack://my-app/./src/components/Main/Messages/Messages.module.scss?0dca","components/Main/Messages/MessageInput/MessageInput.tsx","components/Main/Messages/MessagesContainer.tsx","components/Main/Messages/Messages.tsx","hoc/AuthHoc.tsx"],"sourcesContent":["import React from \"react\";\r\n\r\ntype PropsType = {\r\n    text: string\r\n  }\r\n  \r\n\r\nexport const MessageText: React.FunctionComponent<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n         {props.text}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { MessageType } from \"../../../../types/messageReducerTypes\";\r\nimport { MessageText } from \"./MessageText/MessageText\";\r\n\r\ntype PropsType = {\r\n  messages: MessageType[]\r\n}\r\n\r\n\r\nexport const Message: React.FunctionComponent<PropsType> = (props) => {\r\n  let arrMessage = props.messages.map(item => <MessageText text={item.text}></MessageText>)\r\n\r\n  return (\r\n    <div>\r\n      {arrMessage}\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"users\":\"Dialogs_users__gijaJ\"};","import React from \"react\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ntype PropsType = {\r\n    text: string\r\n    key: number\r\n}\r\n\r\n\r\nexport const Dialog: React.FunctionComponent<PropsType> = (props) => {\r\n    let path = `/messages/${props.text}`\r\n    return (\r\n        <div>\r\n            <NavLink to={path}>{props.text}</NavLink>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport classes from \"./Dialogs.module.scss\"\r\nimport { Dialog } from \"./Dialog/Dialog\"\r\nimport { UserType } from \"../../../../types/messageReducerTypes\";\r\n\r\ntype PropsType = {\r\n    users: UserType[]\r\n}\r\n\r\n\r\nexport const Dialogs: React.FunctionComponent<PropsType> = (props) => {\r\n    \r\n    let arrElement = props.users.map((item, index) => <Dialog text={item.name} key={index}></Dialog>)\r\n     \r\n    return (\r\n        <div className={classes.users}>\r\n            {arrElement}\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Messages_messages__9tJAE\",\"section\":\"Messages_section__Vjur8\"};","import React from \"react\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { minLength } from \"../../../../Validate/Validate\";\r\nimport { textareaControl } from \"../../../Common/FormControl/FormControl\";\r\n\r\ntype PropsFormReduxContainer = {\r\n  addNewMessage: (message: string) => void;\r\n};\r\n\r\ntype FormData = {\r\n  message: string;\r\n};\r\n\r\nconst MessageInput: React.FunctionComponent<InjectedFormProps<FormData>> = (props) => {\r\n  const { handleSubmit } = props;\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Field component={textareaControl} name={\"message\"} validate={[minLength]} />\r\n      <button>Send</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const MessagesInputContainer: React.FunctionComponent<PropsFormReduxContainer> = (props) => {\r\n  let onSubmit = (formData: FormData) => {\r\n    props.addNewMessage(formData.message);\r\n  };\r\n  return (\r\n    <div>\r\n      <MessageFormRedux onSubmit={onSubmit} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst MessageFormRedux = reduxForm<FormData>({\r\n  form: \"message\",\r\n})(MessageInput);\r\n","import { Messages } from \"./Messages\";\r\nimport { actionsMessageReducer } from \"../../../state/messageReducer\";\r\n\r\nimport { connect } from \"react-redux/es/exports\";\r\nimport { AuthHoc } from \"../../../hoc/AuthHoc\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../../../state/redux-store\";\r\nimport { MessageType, UserType } from \"../../../types/messageReducerTypes\";\r\n\r\nlet addNewMessageActionCreator = actionsMessageReducer.addNewMessageActionCreator;\r\n\r\ntype MapStatePropsType = {\r\n  users: UserType[]\r\n  messages: MessageType[]\r\n}\r\n\r\ntype MapDispacthPropsType = {\r\n  addNewMessageActionCreator: (message: string) => void\r\n}\r\n\r\ntype OwnPropsType = {\r\n \r\n}\r\n\r\n\r\nlet mapStateToPropse = (state: AppStateType) => {\r\n  return {\r\n    users: state.messagesPage.users,\r\n    messages: state.messagesPage.messages,\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToPropse, {addNewMessageActionCreator}),\r\n  AuthHoc\r\n)(Messages) as React.FunctionComponent;\r\n\r\n\r\n","import React from \"react\";\r\nimport { Message } from \"./Message/Message\";\r\nimport { Dialogs } from \"./Dialogs/Dialogs\";\r\nimport classes from \"./Messages.module.scss\"\r\nimport { MessagesInputContainer } from './MessageInput/MessageInput';\r\nimport { MessageType, UserType } from \"../../../types/messageReducerTypes\";\r\n\r\ntype PropsType = {\r\n  users: UserType[]\r\n  messages: MessageType[]\r\n  addNewMessageActionCreator: (message: string) => void\r\n}\r\n\r\nexport const Messages: React.FunctionComponent<PropsType> = (props) => {  \r\n  return (\r\n    <section className={classes.section} >\r\n      <div className={classes.messages}>\r\n      <Dialogs users={props.users}/>\r\n      <Message messages={props.messages}/>\r\n      <MessagesInputContainer addNewMessage={props.addNewMessageActionCreator}></MessagesInputContainer>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux/es/exports\";\r\nimport { AppStateType } from \"../state/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean;\r\n};\r\n\r\ntype MapDispacthPropsType = {};\r\n\r\ntype OwnPropsType = {};\r\n\r\nlet mapStateToPropse = (state: AppStateType) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport function AuthHoc<T extends object>(Component: React.ComponentType<T>) {\r\n  const RedirectAuthHoc: React.FunctionComponent<MapStatePropsType & MapDispacthPropsType> = (\r\n    props\r\n  ) => {\r\n    let { isAuth, ...restProps } = props;\r\n    if (!isAuth) return <Navigate to=\"/login\" />;\r\n    return (\r\n      <>\r\n        <Component {...restProps as T} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return connect<MapStatePropsType, MapDispacthPropsType, OwnPropsType, AppStateType>(\r\n    mapStateToPropse,\r\n    {}\r\n  )(RedirectAuthHoc);\r\n}\r\n\r\n// что бы не писать isAuth в каждой контейнерной компоненте, и не делать проверку if (!props.isAuth) return <Navigate to=\"/login\" />;\r\n// мы создали специальную компоненту \"Компоненту высшего порядка\", которая принимает в себя компоненту и возвращает другую компоненту\r\n// также мы обернули эту компоненту в коннект, что б в каждом файле не передавать isAuth: state.auth.isAuth,\r\n"],"names":["MessageText","props","text","Message","arrMessage","messages","map","item","Dialog","path","to","Dialogs","arrElement","users","index","name","className","classes","MessagesInputContainer","MessageFormRedux","onSubmit","formData","addNewMessage","message","reduxForm","form","handleSubmit","Field","component","textareaControl","validate","minLength","addNewMessageActionCreator","actionsMessageReducer","compose","connect","state","messagesPage","AuthHoc","mapStateToPropse","isAuth","auth","Component","restProps"],"sourceRoot":""}