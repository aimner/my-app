{"version":3,"file":"static/js/667.831ac248.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/Main/Profile/Profile.module.scss?2ab5","webpack://my-app/./src/components/Main/Profile/Posts/Post/Post.module.scss?162a","components/Main/Profile/Posts/Post/Post.tsx","components/Main/Profile/Posts/Posts.tsx","webpack://my-app/./src/components/Main/Profile/ProfileInfo/ProfileInfo.module.scss?7ff2","webpack://my-app/./src/components/Main/Profile/ProfileInfo/ProfileInfoForm/ProfileInfoForm.module.scss?c979","components/Main/Profile/ProfileInfo/ProfileInfoForm/ProfileInfoForm.tsx","components/Main/Profile/ProfileInfo/ProfileInfoHook.tsx","components/Main/Profile/ProfileInput/ProfileInput.tsx","components/Main/Profile/Profile.tsx","components/Main/Profile/ProfileContainer.tsx","hoc/AuthHoc.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Profile_section__ai+0H\",\"section__profile\":\"Profile_section__profile__LXolN\"};","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"Post_avatar__tX11S\"};","import React from \"react\";\r\nimport { PostType } from \"../../../../../types/profileReducerTypes\";\r\nimport classes from \"./Post.module.scss\";\r\n\r\ntype PropsType = {\r\n  postInfo: PostType;\r\n}\r\n\r\nexport const Post: React.FunctionComponent<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <img\r\n        src=\"https://avatars.githubusercontent.com/u/85486375?v=4\"\r\n        alt=\"avatar\"\r\n        className={classes.avatar}\r\n      />\r\n      <div>{props.postInfo.user}</div>\r\n      <div>{props.postInfo.text}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n","import React from \"react\";\r\nimport { PostType } from \"../../../../types/profileReducerTypes\";\r\nimport { Post } from './Post/Post'\r\n\r\ntype PropsType = {\r\n    posts: PostType[]\r\n}\r\n\r\nexport const Posts: React.FunctionComponent<PropsType> = (props) => {\r\n    let posts = props.posts.map((item) =>  <Post postInfo={item}/>)\r\n    return <div>\r\n        {posts}\r\n    </div>\r\n}\r\n\r\nexport default React.memo(Posts)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"ProfileInfo_avatar__YhCBy\",\"profile__info\":\"ProfileInfo_profile__info__-WZ-B\",\"infoText\":\"ProfileInfo_infoText__QB-zQ\",\"error\":\"ProfileInfo_error__JS4Xc\"};","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"ProfileInfoForm_avatar__uptZu\",\"profile__info\":\"ProfileInfoForm_profile__info__qK0Ll\",\"infoText\":\"ProfileInfoForm_infoText__QA3MI\",\"error\":\"ProfileInfoForm_error__6WJ-m\"};","import React from \"react\";\r\nimport classes from \"./ProfileInfoForm.module.scss\"\r\nimport { maxLength, minLength } from \"../../../../../Validate/Validate\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { inputControl } from \"../../../../Common/FormControl/FormControl\";\r\nimport { ProfileType } from \"../../../../../types/profileReducerTypes\";\r\n\r\nlet maxLengthNumber = maxLength(40);\r\n\r\ntype PropsType = {\r\n  changeProfileThunk: (profile: ProfileType) => void;\r\n  setFormEditMode: (formEditMode: boolean) => void;\r\n}\r\n\r\ntype PropsForm = {\r\n  profile: ProfileType;\r\n}\r\n\r\nconst ProfileInfoForm: React.FunctionComponent<InjectedFormProps<ProfileType>> = (props) => {\r\n  const { handleSubmit } = props;\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <Field\r\n          name=\"fullName\"\r\n          component={inputControl}\r\n          validate={[minLength, maxLengthNumber]}\r\n          type=\"text\"\r\n          placeholder=\"Fullname...\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field\r\n          name=\"aboutMe\"\r\n          component={inputControl}\r\n          validate={[minLength, maxLengthNumber]}\r\n          type=\"text\"\r\n          placeholder=\"About Me...\"\r\n        />\r\n      </div>\r\n      <fieldset>\r\n        <legend>Contacts</legend>\r\n        <div>\r\n          <Field\r\n            name=\"contacts.vk\"\r\n            component={inputControl}\r\n            validate={[minLength, maxLengthNumber]}\r\n            type=\"text\"\r\n            placeholder=\"Vk...\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <Field\r\n            name=\"contacts.github\"\r\n            component={inputControl}\r\n            validate={[minLength, maxLengthNumber]}\r\n            type=\"text\"\r\n            placeholder=\"Github...\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <Field\r\n            name=\"contacts.instagram\"\r\n            component={inputControl}\r\n            validate={[minLength, maxLengthNumber]}\r\n            type=\"text\"\r\n            placeholder=\"Instagram...\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <Field\r\n            name=\"contacts.twitter\"\r\n            component={inputControl}\r\n            validate={[minLength, maxLengthNumber]}\r\n            type=\"text\"\r\n            placeholder=\"Twitter...\"\r\n          />\r\n        </div>\r\n      </fieldset>\r\n      <div>\r\n        <Field name=\"lookingForAJob\" component=\"input\" type=\"checkbox\" />\r\n        Looking for a job?\r\n      </div>\r\n      <div>\r\n        <Field\r\n          name=\"lookingForAJobDescription\"\r\n          component={inputControl}\r\n          validate={[minLength, maxLengthNumber]}\r\n          type=\"text\"\r\n          placeholder=\"Job description...\"\r\n        />\r\n      </div>\r\n      <div className={props.error ? classes.error : ''}>{props.error}</div>\r\n      <div>\r\n        <button>Отправить данные</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileInfoFormRedux = reduxForm<ProfileType>({\r\n  form: \"editInfo\",\r\n})(ProfileInfoForm);\r\n\r\nexport const ProfileInfoFormContainer: React.FunctionComponent<PropsType & PropsForm> = (props) => {\r\n  \r\n  const onSubmit = (value: ProfileType) => {\r\n   let v = props.changeProfileThunk(value) as unknown as Promise<string>;\r\n   v.then(() => {\r\n    props.setFormEditMode(false)\r\n   })\r\n  };\r\n  return (\r\n    <div>\r\n      <ProfileInfoFormRedux\r\n        initialValues={props.profile}\r\n        onSubmit={onSubmit}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { SyntheticEvent } from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { ProfileType } from \"../../../../types/profileReducerTypes\";\r\nimport classes from \"./ProfileInfo.module.scss\";\r\nimport { ProfileInfoFormContainer } from './ProfileInfoForm/ProfileInfoForm';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n  status: string\r\n  authId: number\r\n  setStatusThunk: (status: string) => void\r\n  changePhotoThunk: (file: File) => void\r\n  changeProfileThunk: (profile: ProfileType) => void\r\n}\r\n\r\n\r\nexport const ProfileInfo: React.FunctionComponent<PropsType> = (props) => {\r\n  \r\n  let [editMode, setEditMode] = useState(false);\r\n  let [formEditMode, setFormEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n  \r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.setStatusThunk(status);\r\n  };\r\n\r\n  const changeStatus = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setStatus((event.currentTarget.value))\r\n  };\r\n\r\n  const sendPhoto = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    props.changePhotoThunk(event.target.files![0]);\r\n  };\r\n\r\n  const showHideEditForm = () => {\r\n    setFormEditMode(!formEditMode);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.profile__info}>\r\n      <div>\r\n        <img\r\n          src={\r\n            props.profile.photos?.small\r\n              ? props.profile.photos.small\r\n              : \"https://avatars.githubusercontent.com/u/85486375?v=4\"\r\n          }\r\n          alt=\"avatar\"\r\n          className={classes.avatar}\r\n        />\r\n        {props.authId === props.profile.userId ? (\r\n          <input type={\"file\"} onChange={sendPhoto} />\r\n        ) : null}\r\n      </div>\r\n      {editMode ? (\r\n        <input\r\n          type=\"text\"\r\n          autoFocus={true}\r\n          onBlur={deactivateEditMode}\r\n          defaultValue={status}\r\n          onChange={changeStatus}\r\n        />\r\n      ) : (\r\n        <div onDoubleClick={activateEditMode}>\r\n          <span className={classes.infoText}>Status:</span> {status}\r\n        </div>\r\n      )}\r\n      {formEditMode ? (\r\n        <ProfileInfoFormContainer\r\n          profile={props.profile}\r\n          changeProfileThunk={props.changeProfileThunk}\r\n          setFormEditMode={setFormEditMode}\r\n        />\r\n      ) : (\r\n        <div className=\"profile-description\">\r\n          <ul>\r\n            <li>\r\n              <span className={classes.infoText}>Full name: </span>\r\n              {props.profile.fullName}\r\n            </li>\r\n            <li>\r\n              <span className={classes.infoText}>ID: </span>\r\n              {props.profile.userId}\r\n            </li>\r\n            <li>\r\n              <span className={classes.infoText}>About Me: </span>\r\n              {props.profile.aboutMe || \"Не указано\"}\r\n            </li>\r\n            <li>\r\n              <span className={classes.infoText}>VK: </span>\r\n              {props.profile.contacts?.vk || \"Не указано\"}\r\n            </li>\r\n            <li>\r\n              <span className={classes.infoText}>Github: </span>\r\n              {props.profile.contacts?.github || \"Не указано\"}\r\n            </li>\r\n            <li>\r\n              <span className={classes.infoText}>Instagram: </span>\r\n              {props.profile.contacts?.instagram || \"Не указано\"}\r\n            </li>\r\n            <li>\r\n              <span className={classes.infoText}>Twitter: </span>\r\n              {props.profile.contacts?.twitter || \"Не указано\"}\r\n            </li>\r\n            <li>\r\n              <span className={classes.infoText}>Twitter: </span>\r\n              {props.profile.contacts?.twitter || \"Не указано\"}\r\n            </li>\r\n            <li>\r\n              <span className={classes.infoText}>Job description: </span>\r\n              {props.profile.lookingForAJobDescription || \"Не указано\"}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n      {props.authId === props.profile.userId ? (\r\n        <button onClick={showHideEditForm}>Edit</button>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\n","import React from \"react\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { maxLengtth50, minLength } from '../../../../Validate/Validate';\r\nimport { textareaControl } from '../../../Common/FormControl/FormControl';\r\n\r\ntype PropsType = {\r\n   post: string\r\n}\r\n\r\ntype PropsFormType = {\r\n  addNewPostText: (text: string) => void\r\n}\r\n\r\nconst ProfileInput: React.FunctionComponent<InjectedFormProps<PropsType>> = (props) => {\r\n  const { handleSubmit } = props;\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Field\r\n        component={textareaControl}\r\n        name={'post'}\r\n        validate={[maxLengtth50, minLength]}\r\n        placeholder=\"Post text...\"\r\n      />\r\n      <button>Send</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport const ProfileInputContainer: React.FunctionComponent<PropsFormType> = (props) => {\r\n  let lol = (formData: PropsType) => {\r\n    console.log(formData);\r\n    props.addNewPostText(formData.post)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ProfileInputContainerRedux onSubmit={lol}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProfileInputContainerRedux = reduxForm<PropsType>({\r\n  form: \"post\",\r\n})(ProfileInput);\r\n","import React from \"react\";\r\nimport classes from \"./Profile.module.scss\"\r\nimport Posts from \"./Posts/Posts\";\r\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfoHook\";\r\nimport { ProfileInputContainer } from \"./ProfileInput/ProfileInput\";\r\nimport { UserType } from \"../../../types/usersReducerType\";\r\nimport { PostType, ProfileType } from \"../../../types/profileReducerTypes\";\r\n\r\ntype PropsType = MapStatePropsType & MapDispacthPropsType\r\n\r\ntype MapStatePropsType = {\r\n  posts: PostType[];\r\n  authId: number\r\n  profile: ProfileType\r\n  status: string\r\n}\r\n\r\ntype MapDispacthPropsType = {\r\n  getProfileThunk: (id: number) => void\r\n  getStatusThunk: (id: number) => void\r\n  addNewPostText: (text: string) => void\r\n  setStatusThunk: (status: string) => void\r\n  changePhotoThunk: (file: File) => void\r\n  changeProfileThunk: (profile: ProfileType) => void\r\n}\r\n\r\nexport const Profile: React.FunctionComponent<PropsType> = (props) => {\r\n\r\n  return (\r\n    <section className={classes.section}>\r\n      <div className={classes.section__profile}>\r\n        <ProfileInfo profile={props.profile} status={props.status} setStatusThunk={props.setStatusThunk} authId={props.authId} changePhotoThunk={props.changePhotoThunk} changeProfileThunk={props.changeProfileThunk}/>\r\n        <ProfileInputContainer addNewPostText={props.addNewPostText} />\r\n        <Posts posts={props.posts}/>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Profile } from \"./Profile\";\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport { connect } from \"react-redux/es/exports\";\r\nimport {\r\n  getProfileThunk,\r\n  getStatusThunk,\r\n  setStatusThunk,\r\n  changePhotoThunk,\r\n  changeProfileThunk,\r\n  actionsProfileReducer,\r\n} from \"./../../../state/profileReducer\";\r\nimport { AuthHoc } from \"../../../hoc/AuthHoc\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../../../state/redux-store\";\r\nimport { UserType } from \"../../../types/usersReducerType\";\r\nimport { PostType, ProfileType } from \"../../../types/profileReducerTypes\";\r\n\r\nlet addNewPostText = actionsProfileReducer.addNewPostText;\r\n\r\ntype PropsType = MapStatePropsType & MapDispacthPropsType & OwnPropsType;\r\n\r\ntype MapStatePropsType = {\r\n  posts: PostType[];\r\n  authId: number;\r\n  profile: ProfileType;\r\n  status: string;\r\n};\r\n\r\ntype MapDispacthPropsType = {\r\n  getProfileThunk: (id: number) => void;\r\n  getStatusThunk: (id: number) => void;\r\n  addNewPostText: (text: string) => void;\r\n  setStatusThunk: (status: string) => void;\r\n  changePhotoThunk: (file: File) => void;\r\n  changeProfileThunk: (profile: ProfileType) => void;\r\n};\r\n\r\ntype OwnPropsType = {\r\n  router: any;\r\n};\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n  componentDidMount() {\r\n    let userId = this.props.router.params.userId || this.props.authId;\r\n    this.props.getProfileThunk(userId);\r\n    this.props.getStatusThunk(userId);\r\n  } // метод вызывается после рендеринга компонента\r\n\r\n  componentDidUpdate(prevProps: PropsType) {\r\n    if (this.props.router.params?.userId !== prevProps.router.params?.userId) {\r\n      let userId = this.props.router.params.userId || this.props.authId;\r\n      this.props.getProfileThunk(userId);\r\n      this.props.getStatusThunk(userId);\r\n    }\r\n  } // метод выполняется после обновления пропсов или стейта\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Profile {...this.props} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// export const ProfileContainer = (props) => {\r\n\r\n//   // let newPostText = props.store.getState().profilePage.newPost;\r\n\r\n//   // let addNewPostText = () => {\r\n//   //   props.store.dispatch(addNewPostActionCreator());\r\n//   // };\r\n\r\n//   // let changePostText = (text) => {\r\n//   //   props.store.dispatch(updateNewPostActionCreator(text));\r\n//   // };\r\n\r\n//   // let posts = props.store.getState().profilePage.posts;\r\n\r\n//   return (\r\n//     <MyContext.Consumer>\r\n//       {(store) => {\r\n//           let newPostText = store.getState().profilePage.newPost;\r\n\r\n//           let addNewPostText = () => {\r\n//             store.dispatch(addNewPostActionCreator());\r\n//           };\r\n\r\n//           let changePostText = (text) => {\r\n//             store.dispatch(updateNewPostActionCreator(text));\r\n//           };\r\n\r\n//           let posts = store.getState().profilePage.posts;\r\n//         return (\r\n//           <Profile\r\n//             newPost={newPostText}\r\n//             addNewPostText={addNewPostText}\r\n//             changePostText={changePostText}\r\n//             posts={posts}\r\n//           ></Profile>\r\n//         );\r\n//       }}\r\n//     </MyContext.Consumer>\r\n//   );\r\n// };\r\n\r\nlet mapStateToPropse = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authId: state.auth.id,\r\n  };\r\n};\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     addNewPostText: () => {\r\n//       dispatch(addNewPostText());\r\n//     },\r\n//     changePostText: (text) => {\r\n//       dispatch(changePostText(text));\r\n//     },\r\n//     setProfile: (profile) => {\r\n//       dispatch(setProfile(profile));\r\n//     },\r\n//   };\r\n// };\r\n\r\nexport default compose(\r\n  connect(mapStateToPropse, {\r\n    addNewPostText,\r\n    getProfileThunk,\r\n    getStatusThunk,\r\n    setStatusThunk,\r\n    changePhotoThunk,\r\n    changeProfileThunk,\r\n  }),\r\n  withRouter,\r\n  AuthHoc\r\n)(ProfileContainer) as React.FunctionComponent;\r\n// данная функция делает вызов функций одну за одной начиная с ProfileContainer и заканчивая connect\r\n\r\nfunction withRouter(Component: React.FunctionComponent) {\r\n  function ComponentWithRouterProp(props: any) {\r\n    let location = useLocation();\r\n    let navigate = useNavigate();\r\n    let params = useParams();\r\n    return <Component {...props} router={{ location, navigate, params }} />;\r\n  }\r\n\r\n  return ComponentWithRouterProp;\r\n}\r\n\r\n// let ProfileContainerWithRouter = withRouter(AuthHoc(ProfileContainer)); // возвращает нам новую компоненту, в пропсы прокидывая ей данные по URL(уже не работает, нужны хуки)\r\n\r\n// // Мы вместо функции mapDispatchToProps в connect можем сразу передать наши actionCreator, connect сам сделает коллбек функции на их основе\r\n\r\n// export default connect(mapStateToPropse, {\r\n//   addNewPostText,\r\n//   changePostText,\r\n//   getProfileThunk,\r\n// })(ProfileContainerWithRouter);\r\n","import React from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { connect } from \"react-redux/es/exports\";\r\nimport { AppStateType } from \"../state/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean;\r\n};\r\n\r\ntype MapDispacthPropsType = {};\r\n\r\ntype OwnPropsType = {};\r\n\r\nlet mapStateToPropse = (state: AppStateType) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport function AuthHoc<T extends object>(Component: React.ComponentType<T>) {\r\n  const RedirectAuthHoc: React.FunctionComponent<MapStatePropsType & MapDispacthPropsType> = (\r\n    props\r\n  ) => {\r\n    let { isAuth, ...restProps } = props;\r\n    if (!isAuth) return <Navigate to=\"/login\" />;\r\n    return (\r\n      <>\r\n        <Component {...restProps as T} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return connect<MapStatePropsType, MapDispacthPropsType, OwnPropsType, AppStateType>(\r\n    mapStateToPropse,\r\n    {}\r\n  )(RedirectAuthHoc);\r\n}\r\n\r\n// что бы не писать isAuth в каждой контейнерной компоненте, и не делать проверку if (!props.isAuth) return <Navigate to=\"/login\" />;\r\n// мы создали специальную компоненту \"Компоненту высшего порядка\", которая принимает в себя компоненту и возвращает другую компоненту\r\n// также мы обернули эту компоненту в коннект, что б в каждом файле не передавать isAuth: state.auth.isAuth,\r\n"],"names":["Post","props","src","alt","className","classes","postInfo","user","text","Posts","posts","map","item","React","maxLengthNumber","maxLength","ProfileInfoFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","name","component","inputControl","validate","minLength","type","placeholder","error","ProfileInfoFormContainer","initialValues","profile","value","changeProfileThunk","then","setFormEditMode","ProfileInfo","useState","editMode","setEditMode","formEditMode","status","setStatus","useEffect","photos","small","authId","userId","onChange","event","changePhotoThunk","target","files","autoFocus","onBlur","setStatusThunk","defaultValue","currentTarget","onDoubleClick","fullName","aboutMe","contacts","vk","github","instagram","twitter","lookingForAJobDescription","onClick","ProfileInputContainer","ProfileInputContainerRedux","formData","console","log","addNewPostText","post","textareaControl","maxLengtth50","Profile","actionsProfileReducer","ProfileContainer","this","router","params","getProfileThunk","getStatusThunk","prevProps","compose","connect","state","profilePage","auth","id","Component","location","useLocation","navigate","useNavigate","useParams","AuthHoc","mapStateToPropse","isAuth","restProps","to"],"sourceRoot":""}